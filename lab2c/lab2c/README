Name: Omar Ozgur
ID: 704465898
Class: CS111
Lab Section: 1C
Project: 2c

*** README ***

Answers and Analysis:

	2C.1A: Explain the change in performance of the synchronized methods as a function of the 
	number of threads per list

	As the number of lists increases, the ratio of threads to lists decreases. This causes less
	conflicts to occur because threads will be less likely to modify the same data structures
	concurrently. Another reason is that with shorter lists, it will take less time to iterate
	through elements to insert or search for elements. This is the reason that even the time
	per operation drops even in the unprotected case when the ratio of threads to lists
	decreases.

	2C.1B: Explain why threads per list is a more interesting number than threads (for this 
	particular measurement)

	The ratio of threads to lists is important because it related to the amount of conflicts
	that occur between threads. If there are many threads, and not as many lists, there will
	likely be collisions between threads that are trying to modify the same lists concurrently.
	However, if there are many lists, but not many threads, it will be less likely that threads
	will conflict with each other. Simply knowing the number of threads does not help to
	predict the number of conflicts since these threads may be spread out amongst many lists,
	or may all be trying to access a few lists.

	-------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------

	*** Performance Analysis ***
	
	1.1: After compiling the program with the -pg option, and running it with a single list for a
	large number of iterations, gprof was used to analyze the time that was spent in each
	function. From this information, it was seen that most of the time was spent in the
	"SortedList_insert()" and "SortedList_lookup()" functions. Calls to each of these functions
	took about 50% of the total execution time. This is due to the fact that
	every insertion and lookup required a particular thread to iterate through a given list,
	and then perform actions to modify elements, which becomes expensive as the number
	of elements in the list grows. The "SortedList_length()" function was also seen to be
	expensive since it required iterating through all of the elements in the list. However,
	since this was not done too often, it didn't contribute too much to the overall running 
	time of the program. Next, it was seen that the initialization of the lists and elements 
	took up some time since memory had to be allocated for everything, and keys had to be 
	generated. It was seen that although "SortedList_delete()" was called many times, it 
	did not contribute much to the program time since the element that was going to be deleted 
	was always specified ahead of time, which eliminated the need for expensive iteration 
	through the list.

	1.2/1.3: 
	(1 List, 1 Thread, 5k Iterations, Unprotected)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  us/call  us/call  name
	 66.77      0.02     0.02     5000     4.01     4.01  SortedList_insert
	 33.38      0.03     0.01     5000     2.00     2.00  SortedList_lookup
	  0.00      0.03     0.00     5000     0.00     0.00  SortedList_delete
	  0.00      0.03     0.00     5000     0.00     0.00  hashFunction
	  0.00      0.03     0.00        2     0.00     0.00  SortedList_length
	  0.00      0.03     0.00        1     0.00     0.00  listInit
	  0.00      0.03     0.00        1     0.00     0.00  parseArgs
	  0.00      0.03     0.00        1     0.00     0.00  runThreads

	(1 List, 1 Thread, 10k Iterations, Unprotected)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  us/call  us/call  name
	 50.08      0.07     0.07    10000     7.01     7.01  SortedList_insert
	 50.08      0.14     0.07    10000     7.01     7.01  SortedList_lookup
	  0.00      0.14     0.00    10000     0.00     0.00  SortedList_delete
	  0.00      0.14     0.00    10000     0.00     0.00  hashFunction
	  0.00      0.14     0.00        2     0.00     0.00  SortedList_length
	  0.00      0.14     0.00        1     0.00     0.00  listInit
	  0.00      0.14     0.00        1     0.00     0.00  parseArgs
	  0.00      0.14     0.00        1     0.00     0.00  runThreads

	(1 List, 1 Thread, 25k Iterations, Unprotected)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  us/call  us/call  name
	 54.63      0.48     0.48    25000    19.23    19.23  SortedList_lookup
	 45.52      0.88     0.40    25000    16.02    16.02  SortedList_insert
	  0.00      0.88     0.00    25000     0.00     0.00  SortedList_delete
	  0.00      0.88     0.00    25000     0.00     0.00  hashFunction
	  0.00      0.88     0.00        2     0.00     0.00  SortedList_length
	  0.00      0.88     0.00        1     0.00     0.00  listInit
	  0.00      0.88     0.00        1     0.00     0.00  parseArgs
	  0.00      0.88     0.00        1     0.00     0.00  runThreads

	(1 List, 1 Thread, 50k Iterations, Unprotected)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  us/call  us/call  name
	 57.73      1.66     1.66    50000    33.25    33.25  SortedList_lookup
	 42.08      2.87     1.21    50000    24.24    24.24  SortedList_insert
	  0.35      2.88     0.01                             threadFunction
	  0.00      2.88     0.00    50000     0.00     0.00  SortedList_delete
	  0.00      2.88     0.00    50000     0.00     0.00  hashFunction
	  0.00      2.88     0.00        2     0.00     0.00  SortedList_length
	  0.00      2.88     0.00        1     0.00     0.00  listInit
	  0.00      2.88     0.00        1     0.00     0.00  parseArgs
	  0.00      2.88     0.00        1     0.00     0.00  runThreads

	(1 List, 1 Thread, 100k Iterations, Unprotected)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  us/call  us/call  name
	 50.92      6.02     6.02   100000    60.19    60.19  SortedList_insert
	 49.15     11.83     5.81   100000    58.09    58.09  SortedList_lookup
	  0.08     11.84     0.01                             threadFunction
	  0.00     11.84     0.00   100000     0.00     0.00  SortedList_delete
	  0.00     11.84     0.00   100000     0.00     0.00  hashFunction
	  0.00     11.84     0.00        2     0.00     0.00  SortedList_length
	  0.00     11.84     0.00        1     0.00     0.00  listInit
	  0.00     11.84     0.00        1     0.00     0.00  parseArgs
	  0.00     11.84     0.00        1     0.00     0.00  runThreads
	
	2.1:
	When using mutexes, it could be seen that the majority of the program 
	time was spent in the "SortedList_lookup()" and "SortedList_insert()" 
	functions. This makes sense, especially when the number of lists were low, 
	since it took a lot of time to iterate through all of the elements of any 
	particular list. However, as the number of lists were increased, the amount 
	of time spent in these functions decreased since there were not as many elements 
	in each list to iterate through. The function "SortedList_delete()" did not 
	take up much time since it did not require any form of iteration through 
	elements. The "SortedList_length()" function was also seen to take up quite 
	a bit of time since it required iteration through all of the elements of 
	each list.

	2.2/2.3:
	(1 List, 10 Threads, 10k Iterations, Mutex)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 56.15      6.44     6.44   100000     0.06     0.06  SortedList_lookup
	 43.40     11.42     4.98   100000     0.05     0.05  SortedList_insert
	  0.17     11.44     0.02       11     1.82     1.82  SortedList_length
	  0.17     11.46     0.02        1    20.03    30.05  listInit
	  0.09     11.47     0.01   100000     0.00     0.00  SortedList_delete
	  0.09     11.48     0.01   100000     0.00     0.00  hashFunction
	  0.09     11.49     0.01                             threadFunction
	  0.00     11.49     0.00        1     0.00     0.00  parseArgs
	  0.00     11.49     0.00        1     0.00     1.82  runThreads

	(1k Lists, 10 Threads, 10k Iterations, Mutex)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 35.77      0.05     0.05    14539     0.00     0.00  SortedList_lookup
	 21.46      0.08     0.03    26563     0.00     0.00  SortedList_insert
	 14.31      0.10     0.02     6803     0.00     0.00  SortedList_length
	 14.31      0.12     0.02        1    20.03    30.05  listInit
	  7.15      0.13     0.01   100000     0.00     0.00  hashFunction
	  7.15      0.14     0.01                             threadFunction
	  0.00      0.14     0.00    16742     0.00     0.00  SortedList_delete
	  0.00      0.14     0.00        1     0.00     0.00  parseArgs
	  0.00      0.14     0.00        1     0.00     2.94  runThreads

	(2.5k Lists, 10 Threads, 10k Iterations, Mutex)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 31.87      0.07     0.07    15803     0.00     0.00  SortedList_length
	 22.76      0.12     0.05    54211     0.00     0.00  SortedList_insert
	 22.76      0.17     0.05        1    50.08    50.08  listInit
	 18.21      0.21     0.04    37807     0.00     0.00  SortedList_lookup
	  4.55      0.22     0.01                             threadFunction
	  0.00      0.22     0.00   100000     0.00     0.00  hashFunction
	  0.00      0.22     0.00    37208     0.00     0.00  SortedList_delete
	  0.00      0.22     0.00        1     0.00     0.00  parseArgs
	  0.00      0.22     0.00        1     0.00    11.09  runThreads

	(5k Lists, 10 Threads, 10k Iterations, Mutex)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 31.87      0.07     0.07    46918     0.00     0.00  SortedList_insert
	 31.87      0.14     0.07    27858     0.00     0.00  SortedList_length
	 18.21      0.18     0.04        1    40.06    50.08  listInit
	  9.10      0.20     0.02    32646     0.00     0.00  SortedList_lookup
	  4.55      0.21     0.01   100000     0.00     0.00  hashFunction
	  4.55      0.22     0.01                             threadFunction
	  0.00      0.22     0.00    32703     0.00     0.00  SortedList_delete
	  0.00      0.22     0.00        1     0.00     0.00  parseArgs
	  0.00      0.22     0.00        1     0.00    12.58  runThreads

	(7.5k Lists, 10 Threads, 10k Iterations, Mutex)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 41.73      0.05     0.05        1    50.08    50.08  listInit
	 25.04      0.08     0.03    17673     0.00     0.00  SortedList_length
	 25.04      0.11     0.03     7731     0.00     0.00  SortedList_lookup
	  8.35      0.12     0.01    11455     0.00     0.00  SortedList_insert
	  0.00      0.12     0.00   100000     0.00     0.00  hashFunction
	  0.00      0.12     0.00     8947     0.00     0.00  SortedList_delete
	  0.00      0.12     0.00        1     0.00     0.00  parseArgs
	  0.00      0.12     0.00        1     0.00    12.75  runThreads

	(10k Lists, 10 Threads, 10k Iterations, Mutex)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 33.38      0.03     0.03    19763     0.00     0.00  SortedList_length
	 22.26      0.05     0.02   100000     0.00     0.00  hashFunction
	 22.26      0.07     0.02    10518     0.00     0.00  SortedList_insert
	 22.26      0.09     0.02        1    20.03    40.06  listInit
	  0.00      0.09     0.00    11136     0.00     0.00  SortedList_delete
	  0.00      0.09     0.00     8325     0.00     0.00  SortedList_lookup
	  0.00      0.09     0.00        1     0.00     0.00  parseArgs
	  0.00      0.09     0.00        1     0.00    15.20  runThreads

	3.1:
	When varying the number of lists used along with spin-locks, it was seen 
	that most of the time was spent spinning while threads waited to modify 
	the linked-lists. As the number of lists was increased, the amount of spinning 
	decreased since there were less conflicts between threads. The next largest 
	amount of time was spent in the "SortedList_lookup()" and "SortedList_insert()" 
	functions. As the number of lists was increased, the time spent in these 
	functions was decreased since each list held less elements. The function 
	"SortedList_delete()" did not take up much time since it did not require 
	iterating through many elements of any particular list.

	3.2/3.3:
	(10 Lists, 10 Threads, 10k Iterations, Spin-lock)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 61.92      4.14     4.14                             threadFunction
	 22.79      5.66     1.52    93136     0.02     0.02  SortedList_lookup
	 14.84      6.65     0.99    86888     0.01     0.01  SortedList_insert
	  0.45      6.68     0.03      101     0.30     0.30  SortedList_length
	  0.15      6.69     0.01        1    10.02    10.02  listInit
	  0.00      6.69     0.00   100000     0.00     0.00  hashFunction
	  0.00      6.69     0.00    97656     0.00     0.00  SortedList_delete
	  0.00      6.69     0.00        1     0.00     0.00  parseArgs
	  0.00      6.69     0.00        1     0.00     2.97  runThreads

	(1k Lists, 10 Threads, 10k Iterations, Spin-lock)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 31.30      0.05     0.05    25930     0.00     0.00  SortedList_insert
	 18.78      0.08     0.03    14680     0.00     0.00  SortedList_lookup
	 18.78      0.11     0.03        1    30.05    30.05  listInit
	 12.52      0.13     0.02     5947     0.00     0.00  SortedList_length
	 12.52      0.15     0.02                             threadFunction
	  6.26      0.16     0.01    16092     0.00     0.00  SortedList_delete
	  0.00      0.16     0.00   100000     0.00     0.00  hashFunction
	  0.00      0.16     0.00        1     0.00     0.00  parseArgs
	  0.00      0.16     0.00        1     0.00     3.37  runThreads

	(2.5k Lists, 10 Threads, 10k Iterations, Spin-lock)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 45.52      0.10     0.10                             threadFunction
	 18.21      0.14     0.04    15788     0.00     0.00  SortedList_insert
	 18.21      0.18     0.04     9381     0.00     0.00  SortedList_lookup
	 13.66      0.21     0.03    11085     0.00     0.00  SortedList_length
	  4.55      0.22     0.01        1    10.02    10.02  listInit
	  0.00      0.22     0.00   100000     0.00     0.00  hashFunction
	  0.00      0.22     0.00    10905     0.00     0.00  SortedList_delete
	  0.00      0.22     0.00        1     0.00     0.00  parseArgs
	  0.00      0.22     0.00        1     0.00     6.78  runThreads

	(5k Lists, 10 Threads, 10k Iterations, Spin-lock)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 51.93      0.14     0.14                             threadFunction
	 14.84      0.18     0.04    22749     0.00     0.00  SortedList_length
	 11.13      0.21     0.03        1    30.05    50.08  listInit
	  7.42      0.23     0.02   100000     0.00     0.00  hashFunction
	  7.42      0.25     0.02    40477     0.00     0.00  SortedList_lookup
	  7.42      0.27     0.02    33308     0.00     0.00  SortedList_insert
	  0.00      0.27     0.00    39607     0.00     0.00  SortedList_delete
	  0.00      0.27     0.00        1     0.00     0.00  parseArgs
	  0.00      0.27     0.00        1     0.00     8.81  runThreads

	(7.5k Lists, 10 Threads, 10k Iterations, Spin-lock)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 62.60      0.10     0.10                             threadFunction
	 12.52      0.12     0.02    15826     0.00     0.00  SortedList_length
	 12.52      0.14     0.02    15673     0.00     0.00  SortedList_lookup
	  6.26      0.15     0.01    11439     0.00     0.00  SortedList_insert
	  6.26      0.16     0.01        1    10.02    10.02  listInit
	  0.00      0.16     0.00   100000     0.00     0.00  hashFunction
	  0.00      0.16     0.00    16701     0.00     0.00  SortedList_delete
	  0.00      0.16     0.00        1     0.00     0.00  parseArgs
	  0.00      0.16     0.00        1     0.00     9.49  runThreads

	(10k Lists, 10 Threads, 10k Iterations, Spin-lock)
	  %   cumulative   self              self     total
	 time   seconds   seconds    calls  ms/call  ms/call  name
	 55.26      0.16     0.16                             threadFunction
	 13.81      0.20     0.04        1    40.06    50.08  listInit
	 10.36      0.23     0.03    19543     0.00     0.00  SortedList_length
	  6.91      0.25     0.02     9895     0.00     0.00  SortedList_insert
	  6.91      0.27     0.02     7341     0.00     0.00  SortedList_lookup
	  3.45      0.28     0.01   100000     0.00     0.00  hashFunction
	  3.45      0.29     0.01     9142     0.00     0.00  SortedList_delete
	  0.00      0.29     0.00        1     0.00     0.00  parseArgs
	  0.00      0.29     0.00        1     0.00    15.37  runThreads

	-------------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------------

	2C.2A: Compare the time per operation when increasing the lists value. Explain your 
	observations
	
	In the cases of mutexes, as well as spin-locks, increasing the lists values was seen
	to drastically decreases the amount of time spent in the functions that modified the
	linked-lists. One reason that this occurred was due to the fact that if more lists were
	used, each list could be made shorter. This means that functions that had to iterate
	throught entire lists could run in less time since there were not as many elements to 
	iterate through in any particular list. There are also generally less conflicts with
	more lists, which helps to make each function run quickly.

	2C.2B: Compare the time per operation between mutex and spinlock. Explain your observations

	For larger numbers of lists, per-operation times of functions seemed to be better when
	spin-locks were used. This is likely due to the fact that locking and unlocking mutexes
	is relatively expensive in situations where a thread will not have to wait for long while
	trying to access a resource. Since there are many lists available, causing a thread to
	spin during the rare occurrance of a conflict is more efficient than locking and unlocking
	a mutex for such a short time span.

	2C.3A: Why must the mutex be held when pthread_cond_wait is called?

	The reason for holding a mutex when pthread_cond_wait is called is to avoid causing a 
	thread to sleep forever. This ensures that a thread cannot be preempted right before 
	going to sleep. If such preemption was possible, another thread could try to wake the 
	original thread before it sleeps. If this happened, the original thread would go to sleep,
	and it may be possible that no other thread would wake it up.

	2C.3B: Why must the mutex be released when the waiting thread is blocked?

	The mutex must be released while the waiting thread is blocked in order to avoid the
	possibility of deadlock. If a thread went to sleep while holding the mutex, no other 
	thread would be able to use the mutex, which would likely cause the program to 
	stall.	

	2C.3C: Why must the mutex be reacquired when the calling thread resumes?

	The mutex must be reacquired when the calling thread resumes in order to sustain the 
	principle of mutual exclusion. If a thread was able to wake up without reacquiring the 
	lock, it would be possible for multiple threads to be running in a critical section 
	at the same time, which would violate mutual exclusion. Also, since the thread usually 
	checks to see that a condition is true when it wakes up, it is important to do this 
	check with mutual exclusion in order to avoid another possibility of inifinite sleep.

	2C.3D: Why must mutex release be done inside of pthread_cond_wait? Why can't the caller 
	simply release the mutex before calling pthread_cond_wait?

	If we release the mutex before calling pthread_cond_wait, it would be possible for 
	preemption to occur, which may allow another thread to attempt to wake up the original 
	thread before it goes to sleep. If the original thread were to sleep after being signal 
	it may stay asleep forever, which would halt the program's progress. For this reason,
	it is important to release the lock and go to sleep atomically.

	2C.3E: Can pthread_cond_wait be implemented in user mode? If so, how? If it can only be 
	implemented by a system call, explain why?

	Using pthread_cond_wait causes a thread to atomically release a mutex and put itself to 
	sleep. This cannot be done in user mode, since it would require using two function calls, 
	which has the possibility of preemption between the calls. As explained earlier, this 
	is dangerous, since it has the possibility of causing the thread to sleep forever. For 
	this reason, pthread_cond_wait must be implemented by a system call so that the thread 
	can atomically release the mutex and go to sleep.

File Information:

	README: This file gives information about the files that are included in the project, as 
	well as information regarding features and methods of testing.

	Makefile: This is the makefile that was created to automate useful tasks. The "make" 
	command causes the default target to be executed, which builds the executable program 
	"lab2c". "make clean" can be used to remove files created by the build process. 
	"make dist" can be used to create a distributable tarball containing the files "README", 
	"Makefile", "lab2c.c", "SortedList.c", "SortedList.h", and "ratios.png".

	lab2c.c: This is the C program that was created for this project. It uses the Getopt 
	library to parse command line inputs. The program then creates a specified number of 
	threads to perform actions on shared circularly-linked lists. A supported "sync" option 
	causes the threads to be managed with locking mechanisms in order to ensure proper results.
	A "yield" option is also included in order to force threads to yield during critical 
	sections of specific functions.

	SortedList.h: This is a header file that includes the declarations of functions that can 
	be used to manipulate elements within a linked-list. The file also includes data structures
	that can be accessed by lab2b.c and SortedList.c.

	SortedList.c: This is a C program that includes definitions of functions that are defined 
	in the corresponding header file. Such functions include "SortedList_insert", 
	"SortedList_delete", "SortedList_lookup", and "SortedList_length". These functions were 
	used to manipulate specified linked-lists.

	ratios.png: An image that shows a graph of the average time per operation for a given ratios
	of threads to lists. Data is shown for "unprotected", "mutex", and "spin-lock" operation 
	methods. 1000 iterations were used while collecting data.

Options:

	--threads=<numThreads>: Used to specify the number of threads that the program will create.

	--iterations=<numIterations>: Used to specify the number of iterations that each thread 
	will run.

	--lists=<numLists>: Used to specify the number of lists to use.

	--yield=<yieldOptions>: Used to specify which functions should cause threads to yield 
	within critical sections.

	--sync=<syncOption>: Used to specify which sync method should be used to ensure correct 
	output.
